# .github/workflows/audio-automation.yml

name: üó£Ô∏è Generate and Deploy Vocabulary Audio

# This action will automatically run on every push to your main branch
# IF AND ONLY IF a file inside the 'lists/' directory has been changed.
on:
  push:
    branches:
      - main # Or 'master', depending on your repository's default branch
    paths:
      - 'lists/**.json'

jobs:
  generate-audio-files:
    # This job will run on a fresh virtual machine provided by GitHub
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout your repository code
      # This step downloads your project code into the virtual environment.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Python environment
      # This installs a specific version of Python for your script to use.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # You can use any modern version of Python

      # 3. Install Python dependencies
      # This step reads your requirements.txt file and installs the libraries
      # your script needs (requests and boto3).
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests boto3
          
      # 4. Run the Python script to generate and upload audio
      # This is the core step that executes your script.
      # It securely passes your GitHub Secrets as environment variables.
      - name: Generate and Upload Audio
        run: python generate_and_upload.py # Ensure your script is named this
        env:
          UNREAL_SPEECH_API_KEY: ${{ secrets.UNREAL_SPEECH_API_KEY }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_BUCKET: ${{ secrets.R2_BUCKET }}
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}

      # 5. Commit the updated 'available_vocab.json'
      # This step checks if your script created or modified the available_vocab.json file.
      # If it did, it commits the file back to your repository. This is crucial
      # so that the next run knows which words have already been processed.
      - name: Commit updated processed words list
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add lists/available_vocab.json
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Chore: Update processed vocabulary list ü§ñ"
            git push
          fi
